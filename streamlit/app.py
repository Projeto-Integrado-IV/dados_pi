import streamlit as st
import pandas as pd
import plotly.express as px
from sklearn.model_selection import train_test_split
from sklearn.svm import SVR
import numpy as np

from dados import df

st.set_page_config(
    page_title="Projeto Integrado - An√°lise de Mortalidade Infantil", 
    page_icon="üìä"
)

# T√≠tulo da aplica√ß√£o
st.title("Dados de Mortalidade Infantil")

# Sele√ß√£o de cidades no menu lateral
cidades = df['Cidade'].unique()
cidades_selecionadas = st.multiselect("Selecione um ou mais Munic√≠pios:", cidades)

# Sidebar para sele√ß√£o de cidade e par√¢metros de ML
st.sidebar.title("Configura√ß√µes de Aprendizagem de Maquina")

# Par√¢metros do modelo na barra lateral
# Explica√ß√£o sobre o tamanho do teste
st.sidebar.write("O tamanho do teste √© a fra√ß√£o dos dados que ser√° utilizada para avaliar o modelo de aprendizado de m√°quina. Ajuste o controle deslizante abaixo para definir a propor√ß√£o dos dados a serem reservados para teste (por exemplo, 20% dos dados).")

# Par√¢metros do modelo na barra lateral
test_size = st.sidebar.slider("Tamanho do teste (fra√ß√£o)", min_value=0.1, max_value=0.5, value=0.2, step=0.1)
# Par√¢metros do modelo na barra lateral
kernel = st.sidebar.selectbox("Kernel do SVR", options=["linear", "poly", "rbf", "sigmoid"], index=2)

# Explica√ß√£o do kernel selecionado
if kernel == "linear":
    st.sidebar.write("O kernel linear √© uma fun√ß√£o que calcula a previs√£o como uma combina√ß√£o linear das vari√°veis de entrada. √â ideal para dados que t√™m uma rela√ß√£o linear clara.")
elif kernel == "poly":
    st.sidebar.write("O kernel polinomial √© uma fun√ß√£o que calcula a previs√£o como um polin√¥mio das vari√°veis de entrada. Ele pode capturar rela√ß√µes n√£o lineares entre as vari√°veis.")
elif kernel == "rbf":
    st.sidebar.write("O kernel RBF (Radial Basis Function) √© uma fun√ß√£o que calcula a previs√£o com base na dist√¢ncia das vari√°veis de entrada a um ponto central. √â √∫til para capturar complexidades e n√£o linearidades nos dados.")
elif kernel == "sigmoid":
    st.sidebar.write("O kernel sigmoid √© uma fun√ß√£o que imita a fun√ß√£o de ativa√ß√£o sigmoide. √â menos comum em SVR, mas pode ser usado para capturar certas rela√ß√µes n√£o lineares.")

# Filtrando o DataFrame com base nas cidades selecionadas
df_filtrado = df[df['Cidade'].isin(cidades_selecionadas)]

# Exibindo informa√ß√µes dos munic√≠pios selecionados na barra lateral
with st.expander("Informa√ß√µes sobre os munic√≠pios", expanded=True):
    for cidade in cidades_selecionadas:
        df_cidade = df_filtrado[df_filtrado['Cidade'] == cidade]
        area = df_cidade['area_territorial'].values[0] if not df_cidade.empty else 'N/A'
        populacao = df_cidade['populacao'].values[0] if not df_cidade.empty else 'N/A'
        
        # Formata√ß√£o compacta e visualmente agrad√°vel
        st.markdown(f"### {cidade}")
        st.markdown(f"**√Årea Territorial:** {area} km¬≤ | **Popula√ß√£o Urbana:** {populacao}")
        st.write("---")



if not df_filtrado.empty:
    st.subheader("Gr√°fico de Mortalidade Infantil com Previs√µes")

    # Gr√°fico inicial
    fig3 = px.line(title='Taxa de Mortalidade Infantil por Munic√≠pio com Previs√µes',
                   labels={'ano': 'Ano', 'taxa_mortalidade_infantil': 'Taxa de Mortalidade Infantil (por 1000 nascidos vivos)'})

    for cidade in cidades_selecionadas:
        # Filtrar os dados por cidade
        df_cidade = df_filtrado[df_filtrado['Cidade'] == cidade]

        # Calcular a taxa de mortalidade infantil
        if 'obitos menores de 1 Ano' in df_cidade.columns and 'nascidos vivos (por local de resid√™ncia)' in df_cidade.columns:
            df_cidade['taxa_mortalidade_infantil'] = (df_cidade['obitos menores de 1 Ano'] / df_cidade['nascidos vivos (por local de resid√™ncia)']) * 1000
        else:
            st.warning(f"Dados insuficientes para calcular a taxa de mortalidade infantil para {cidade}.")
            continue  # Pula para a pr√≥xima cidade

        # Remover linhas com valores NaN em 'ano' ou 'taxa_mortalidade_infantil'
        df_cidade = df_cidade.dropna(subset=['ano', 'taxa_mortalidade_infantil'])

        # Verifica se ainda existem dados ap√≥s a remo√ß√£o
        if df_cidade.empty:
            st.warning(f"Sem dados dispon√≠veis para {cidade} ap√≥s filtragem.")
            continue  # Pula para a pr√≥xima cidade

        # Preparar dados para o modelo de aprendizado de m√°quina
        X = df_cidade[['ano']].values  # Vari√°vel independente (ano)
        y = df_cidade['taxa_mortalidade_infantil'].values  # Vari√°vel dependente

        # Dividir dados em treino e teste
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=42)

        # Treinar o modelo SVR
        model_svr = SVR(kernel=kernel)
        model_svr.fit(X_train, y_train)

        # Prever valores para os anos futuros (2022 a 2030)
        anos_futuros = np.array([[ano] for ano in range(2022, 2031)])
        previsoes_futuras = model_svr.predict(anos_futuros)

        # Adicionar dados hist√≥ricos e previs√µes ao gr√°fico
        fig3.add_scatter(x=df_cidade['ano'], y=df_cidade['taxa_mortalidade_infantil'], mode='lines+markers', name=f'{cidade} - Dados Reais')
        fig3.add_scatter(x=anos_futuros.flatten(), y=previsoes_futuras, mode='lines+markers', name=f'{cidade} - Previs√£o', line=dict(dash='dash'))

        # Gr√°fico de √≥bitos menores de 1 ano
    fig1 = px.line(df_filtrado, x='ano', y='obitos menores de 1 Ano', color='Cidade', title='√ìbitos Menores de 1 Ano', labels={'ano': 'Ano', 'obitos menores de 1 Ano': '√ìbitos Menores de 1 Ano'}, line_shape='linear')


    # Gr√°fico de nascimentos
    fig2 = px.line(df_filtrado, x='ano', y='nascidos vivos (por local de resid√™ncia)', color='Cidade', title='Nascidos Vivos', labels={'ano': 'Ano', 'nascidos vivos (por local de resid√™ncia)': 'Nascidos Vivos'}, line_shape='linear')


    # Adicionar zonas de classifica√ß√£o
    fig3.add_shape(type="rect", x0=df_filtrado['ano'].min(), y0=50, x1=2030, y1=215, fillcolor="red", opacity=0.2, layer="below", line_width=0, name="Alta (50 ou mais)")
    fig3.add_shape(type="rect", x0=df_filtrado['ano'].min(), y0=20, x1=2030, y1=50, fillcolor="Orange", opacity=0.2, layer="below", line_width=0, name="M√©dia (20-49)")
    fig3.add_shape(type="rect", x0=df_filtrado['ano'].min(), y0=0, x1=2030, y1=20, fillcolor="Green", opacity=0.2, layer="below", line_width=0, name="Baixa (menos de 20)")

    # Legenda das zonas de classifica√ß√£o
    fig3.update_layout(
        annotations=[
            dict(x=2030, y=75, xref="x", yref="y", text="Alta (50 ou mais)", showarrow=False, font=dict(color="Red")),
            dict(x=2030, y=35, xref="x", yref="y", text="M√©dia (20-49)", showarrow=False, font=dict(color="Orange")),
            dict(x=2030, y=10, xref="x", yref="y", text="Baixa (menos de 20)", showarrow=False, font=dict(color="Green"))
        ]
    )

    # Exibir o gr√°fico com dados reais e previs√µes
    st.plotly_chart(fig3)
    st.plotly_chart(fig1)
    st.plotly_chart(fig2)

    # Exibi√ß√£o da tabela de dados filtrados
    st.subheader("Tabela de Dados de Mortalidade Infantil")
    st.dataframe(df_filtrado.style.set_caption("Dados Filtrados de Mortalidade Infantil").set_table_styles(
        [{'selector': 'th', 'props': [('max-width', '200px')]}]))



st.markdown(
    "Fonte dos dados: [Mortalidade Infantil - SEADE](https://repositorio.seade.gov.br/dataset/mortalidade-infantil)"
)
